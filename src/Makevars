## Use the R HOME indirection to support installations of multiple R version
PKG_CPPFLAGS = `$(R_HOME)/bin/Rscript -e "Rcpp:::CxxFlags()"`
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`

# http://lists.r-forge.r-project.org/pipermail/rcpp-devel/2011-August/002746.html
#CXXFLAGS = -std=c++0x -g -O3 -Wall -pipe -pedantic -Wno-variadic-macros

# Own flags.
PKG_CXXFLAGS = -std=c++0x -Wall -Wextra -Wconversion -pedantic -pipe -march=native -g -O3 -fstack-protector --param=ssp-buffer-size=4 -D_GLIBCXX_DEBUG -D_FORTIFY_SOURCE=2
# Own parallel flags.
#PKG_CXXFLAGS = -std=c++0x -Wall -Wextra -Wconversion -pedantic -pipe -march=native -g -O3 -fstack-protector --param=ssp-buffer-size=4 -fopenmp -D_GLIBCXX_DEBUG -D_FORTIFY_SOURCE=2 -D_GLIBCXX_PARALLEL

## As an alternative, one can also add this code in a file ’configure’
##
##    PKG LIBS=‘${R HOME}/bin/Rscript -e ”Rcpp:::LdFlags()”‘
##
##    sed -e ”s|@PKG LIBS@|${PKG LIBS}|” \
##         src/Makevars.in > src/Makevars
##
## which together with the following file ’src/Makevars.in’
##
##    PKG LIBS = @PKG LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries. It should be complemented by a file ’cleanup’
##
##     rm src/Makevars
##
## which removes the autogenerated file src/Makevars.
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.
